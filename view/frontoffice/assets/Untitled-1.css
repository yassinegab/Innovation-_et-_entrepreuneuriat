<?php 
include_once ('../../controller/ConsultationController.php');
//include_once('reponseList.php');
$controller = new ConsultationController();
$consultationC = new ConsultationController();



// Add consultation
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (!empty($_POST['titre']) && !empty($_POST['type']) && !empty($_POST['description']) && !empty($_POST['date']) && !empty($_POST['id_utilisateur']) && !empty($_POST['statut'])) {
        $titre = htmlspecialchars(trim($_POST['titre']));
        $type = htmlspecialchars(trim($_POST['type']));
        $description = htmlspecialchars(trim($_POST['description']));
        $date = $_POST['date'];
        $id_utilisateur = htmlspecialchars(trim($_POST['id_utilisateur']));
        $statut = $_POST['statut'];

        try {
            $db = new PDO('mysql:host=localhost;dbname=projet', 'root', '');
            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            $query = "INSERT INTO consultations (titre, type, description, date_consultation, id_utilisateur, statut) VALUES (:titre, :type, :description, :date, :id_utilisateur, :statut)";
            $stmt = $db->prepare($query);
            $stmt->bindParam(':titre', $titre);
            $stmt->bindParam(':type', $type);
            $stmt->bindParam(':description', $description);
            $stmt->bindParam(':date', $date);
            $stmt->bindParam(':id_utilisateur', $id_utilisateur);
            $stmt->bindParam(':statut', $statut);

            if ($stmt->execute()) {
                header("Location: consultationList.php?success=true");
                exit();
            } else {
                echo 'Erreur lors de l\'insertion.';
            }
        } catch (PDOException $e) {
            echo 'Erreur : ' . $e->getMessage();
        }
    }
}

// Fetch all consultations
$liste = $consultationC->listeConsultations();
?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ConsultPro - Liste des consultations</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


</head>   
<style>
    
/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.7);
    backdrop-filter: blur(8px);
    z-index: 1000;
    overflow: auto;
}

.modal-content {
    background-color: var(--bg-light, #24252b);
    margin: 5% auto;
    padding: 30px; /* Increased padding */
    border-radius: 12px;
    width: 85%; /* Slightly increased width */
    max-width: 900px; /* Increased max-width */
    max-height: 85vh; /* Increased max-height for better space utilization */
    overflow-y: auto;
    position: relative;
    color: var(--text-primary, #fff);
}

.close-modal {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
    color: var(--text-muted, rgba(255, 255, 255, 0.5));
    background: none;
    border: none;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.close-modal:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--text-primary, #fff);
}

/* Main Content */
.main-content {
    flex: 1;
    margin-left: 0; /* Removed margin to avoid unnecessary space */
    padding: 20px;  /* Added padding for better content spacing */
    position: relative;
    overflow: auto; /* Ensures content doesn't overflow */
}

/* New Consultation Modal Styles */
#new-consultation-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    align-items: center;
    justify-content: center;
}

#new-consultation-modal.active {
    display: flex;
    animation: fadeIn 0.3s ease forwards;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

#new-consultation-modal .modal-content {
    background-color: rgb(36, 37, 43);
    margin: auto;
    width: 90%;
    max-width: 550px;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.08);
    overflow: hidden;
    animation: modalSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
}

@keyframes modalSlideIn {
    from { opacity: 0; transform: translateY(-30px); }
    to { opacity: 1; transform: translateY(0); }
}

#new-consultation-modal .modal-header {
    background-color: rgb(45, 46, 54);
    padding: 18px 24px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

#new-consultation-modal .modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.95);
    letter-spacing: -0.01em;
}

#new-consultation-modal .close-modal {
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.6);
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    transition: all 0.2s ease;
}

#new-consultation-modal .close-modal:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
}

#new-consultation-modal .modal-body {
    padding: 24px;
    max-height: calc(100vh - 200px);
    overflow-y: auto;
}

#new-consultation-modal .modal-body::-webkit-scrollbar {
    width: 8px;
}

#new-consultation-modal .modal-body::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
}

#new-consultation-modal .modal-body::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
}

#new-consultation-modal .modal-body::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

#new-consultation-modal .form-group {
    margin-bottom: 20px;
    opacity: 0;
    animation: formElementFadeIn 0.5s ease forwards;
}

#new-consultation-modal .form-group:nth-child(1) { animation-delay: 0.1s; }
#new-consultation-modal .form-group:nth-child(2) { animation-delay: 0.15s; }
#new-consultation-modal .form-group:nth-child(3) { animation-delay: 0.2s; }
#new-consultation-modal .form-group:nth-child(4) { animation-delay: 0.25s; }
#new-consultation-modal .form-group:nth-child(5) { animation-delay: 0.3s; }
#new-consultation-modal .form-group:nth-child(6) { animation-delay: 0.35s; }

@keyframes formElementFadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

#new-consultation-modal .form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    font-weight: 500;
    color: rgba(255, 255, 255, 0.8);
}

#new-consultation-modal .form-group input,
#new-consultation-modal .form-group select,
#new-consultation-modal .form-group textarea {
    width: 100%;
    background-color: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 12px 16px;
    color: rgba(255, 255, 255, 0.9);
    font-size: 15px;
    font-family: 'Inter', sans-serif;
    transition: all 0.2s ease;
}

#new-consultation-modal .form-group input:focus,
#new-consultation-modal .form-group select:focus,
#new-consultation-modal .form-group textarea:focus {
    outline: none;
    border-color: rgb(227, 196, 58);
    box-shadow: 0 0 0 3px rgba(227, 196, 58, 0.15);
}

#new-consultation-modal .form-group select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='rgb(227, 196, 58)' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 12px center;
    padding-right: 40px;
}

#new-consultation-modal .form-group textarea {
    resize: vertical;
    min-height: 120px;
}

/* Styling for type options */
#new-consultation-modal #consultation-type option[value="financing"] {
    background-color: #FFD6E0;
    color: #333;
}

#new-consultation-modal #consultation-type option[value="legal"] {
    background-color: #F3E8FF;
    color: #333;
}

#new-consultation-modal #consultation-type option[value="marketing"] {
    background-color: #FFEFB7;
    color: #333;
}

#new-consultation-modal #consultation-type option[value="technical"] {
    background-color: #DFF4FF;
    color: #333;
}

/* Styling for status options */
#new-consultation-modal #consultation-status option[value="pending"] {
    background-color: #FFEFB7;
    color: #333;
}

#new-consultation-modal #consultation-status option[value="in-progress"] {
    background-color: #DFF4FF;
    color: #333;
}

#new-consultation-modal #consultation-status option[value="completed"] {
    background-color: #DCFCE7;
    color: #333;
}
#new-consultation-modal #consultation-status option[value="cancelled"] {
    background-color: #FEE2E2; /* soft red */
    color: #333;
}

/* Date input styling */
#new-consultation-modal input[type="date"] {
    color-scheme: dark;
}

#new-consultation-modal input[type="date"]::-webkit-calendar-picker-indicator {
    filter: invert(1) brightness(0.8) sepia(100%) saturate(500%) hue-rotate(20deg);
    cursor: pointer;
}

/* Modal footer */
#new-consultation-modal .modal-footer {
    padding: 16px 24px;
    border-top: 1px solid rgba(255, 255, 255, 0.08);
    display: flex;
    justify-content: flex-end;
    gap: 12px;
    background-color: rgba(45, 46, 54, 0.5);
    opacity: 0;
    animation: formElementFadeIn 0.5s ease forwards 0.4s;
}

/* Button styles */
.primary-btn,
.secondary-btn {
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    font-family: 'Inter', sans-serif;
}

.primary-btn {
    background-color: rgb(227, 196, 58);
    color: rgb(29, 30, 35);
}

.primary-btn:hover {
    background-color: rgba(227, 196, 58, 0.9);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(227, 196, 58, 0.2);
}

.primary-btn:active {
    transform: translateY(0);
}

.secondary-btn {
    background-color: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.9);
}

.secondary-btn:hover {
    background-color: rgba(255, 255, 255, 0.15);
    transform: translateY(-2px);
}

.secondary-btn:active {
    transform: translateY(0);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    #new-consultation-modal .modal-content {
        width: 95%;
        max-width: none;
    }
    
    #new-consultation-modal .modal-body {
        padding: 16px;
        max-height: calc(100vh - 150px);
    }
    
    #new-consultation-modal .form-group {
        margin-bottom: 16px;
    }
    
    #new-consultation-modal .modal-footer {
        padding: 12px 16px;
        flex-direction: column-reverse;
    }
    
    .primary-btn,
    .secondary-btn {
        width: 100%;
        text-align: center;
    }
}

/* Enhanced Modal Styles with Blur Effect */
body.modal-open {
    overflow: hidden;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(8px);
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease;
    justify-content: center;
    align-items: center;
}

.modal.modal-active {
    display: flex;
    opacity: 1;
}

.modal-content {
    background-color: var(--bg-light, #24252b);
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    transform: translateY(-20px);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
}

.modal.modal-active .modal-content {
    transform: translateY(0);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background-color: var(--bg-lighter, #2d2e36);
    border-bottom: 1px solid var(--border-color, rgba(255, 255, 255, 0.1));
}

.modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
    color: var(--accent-color, rgb(227, 196, 58));
}

.close-modal {
    background: none;
    border: none;
    color: var(--text-muted, rgba(255, 255, 255, 0.5));
    font-size: 24px;
    cursor: pointer;
    transition: color 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
}

.close-modal:hover {
    color: var(--text-primary, #fff);
    background-color: rgba(255, 255, 255, 0.1);
}

.modal-body {
    padding: 20px;
    overflow-y: auto;
    flex: 1;
}

.loading-spinner {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px;
    color: var(--text-secondary, rgba(255, 255, 255, 0.7));
}

.loading-spinner i {
    font-size: 2rem;
    margin-bottom: 16px;
    color: var(--accent-color, rgb(227, 196, 58));
}

.error-message {
    color: var(--danger-color, #f85149);
    text-align: center;
    padding: 20px;
}

/* Fancy animation for the details button */
.fancy-details-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
}

.fancy-details-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.fancy-details-button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.3);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%);
    transform-origin: 50% 50%;
}

.fancy-details-button:focus:not(:active)::after {
    animation: ripple 1s ease-out;
}

@keyframes ripple {
    0% {
        transform: scale(0, 0);
        opacity: 0.5;
    }
    20% {
        transform: scale(25, 25);
        opacity: 0.3;
    }
    100% {
        opacity: 0;
        transform: scale(40, 40);
    }
}

/* Styles pour l'overlay */
.overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 80;
}

.overlay.active {
    display: block;
}

/* Essential notification styles */
.notification-panel {
    position: fixed;
    top: 60px;
    right: -350px; /* Start off-screen */
    width: 350px;
    height: 80vh;
    background-color: #24252b;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    z-index: 1000;
    transition: right 0.3s ease;
    box-shadow: -5px 0 15px rgba(0, 0, 0, 0.2);
}

.notification-panel.active {
    right: 0; /* Move on-screen when active */
}

/* Enhanced notification styles */
.notification-btn {
  position: relative;
  background: none;
  border: none;
  color: var(--text-primary, #fff);
  font-size: 1.2rem;
  cursor: pointer;
  padding: 8px;
  border-radius: 50%;
  transition: background-color 0.2s;
}

.notification-btn:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.notification-badge {
  position: absolute;
  top: 0;
  right: 0;
  background-color: #e3c43a;
  color: #1d1e23;
  font-size: 0.7rem;
  font-weight: bold;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.mark-all-read {
  background: none;
  border: none;
  color: #e3c43a;
  font-size: 12px;
  cursor: pointer;
  padding: 4px 8px;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.mark-all-read:hover {
  background-color: rgba(227, 196, 58, 0.1);
}

.notification-list {
  overflow-y: auto;
  flex: 1;
}

.notification-item {
  padding: 16px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  gap: 12px;
  transition: background-color 0.2s;
  cursor: pointer;
}

.notification-item:hover {
  background-color: #2d2e36;
}

.notification-item.unread {
  border-left: 3px solid #e3c43a;
  background-color: rgba(227, 196, 58, 0.05);
}

.notification-icon {
  color: rgba(255, 255, 255, 0.7);
  display: flex;
  align-items: flex-start;
  justify-content: center;
  width: 24px;
  font-size: 16px;
  padding-top: 2px;
}

.notification-content {
  flex: 1;
}

.notification-content p {
  margin: 0 0 6px 0;
  line-height: 1.4;
  color: #fff;
}

.notification-time {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.5);
  display: block;
}

.notification-empty,
.notification-loading,
.notification-error {
  padding: 20px;
  text-align: center;
  color: rgba(255, 255, 255, 0.5);
  font-style: italic;
}

.notification-error {
  color: #ff6b6b;
}

.notification-header {
  padding: 16px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #2d2e36;
  position: sticky;
  top: 0;
  z-index: 2;
}

.notification-list {
  overflow-y: auto;
  max-height: calc(100vh - 120px);
}

/* Custom Fermer Button Style */
.fermer-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    background-color: rgb(227, 196, 58);
    color: rgb(29, 30, 35) !important;
    border: none;
    border-radius: 8px;
    padding: 12px 24px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    text-align: center;
    margin-top: 20px;
    text-decoration: none;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(227, 196, 58, 0.3);
    z-index: 1;
}

.fermer-btn:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.2));
    z-index: -1;
    transition: all 0.3s ease;
}

.fermer-btn:hover {
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 7px 15px rgba(227, 196, 58, 0.4);
}

.fermer-btn:hover:before {
    opacity: 0.8;
}

.fermer-btn:active {
    transform: translateY(1px);
    box-shadow: 0 2px 5px rgba(227, 196, 58, 0.3);
}

.fermer-btn i {
    font-size: 16px;
    transition: transform 0.3s ease;
}

.fermer-btn:hover i {
    transform: translateX(3px);
}

/* New Consultation Button Style */
.new-consultation-btn {
    background-color: rgb(227, 196, 58);
    color: rgb(29, 30, 35);
    border: none;
    border-radius: 8px;
    padding: 12px 18px;
    font-weight: 600;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 0 4px 10px rgba(227, 196, 58, 0.2);
    position: relative;
    overflow: hidden;
    z-index: 1;
}

.new-consultation-btn:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.2));
    z-index: -1;
    transition: all 0.3s ease;
}

.new-consultation-btn:hover {
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 7px 15px rgba(227, 196, 58, 0.3);
}

.new-consultation-btn:hover:before {
    opacity: 0.8;
}

.new-consultation-btn:active {
    transform: translateY(1px);
    box-shadow: 0 2px 5px rgba(227, 196, 58, 0.2);
}

.new-consultation-btn i {
    font-size: 14px;
    transition: transform 0.3s ease;
}

.new-consultation-btn:hover i {
    transform: rotate(90deg);
}
</style>

<body>

    <main class="main-content">
    
        <header class="main-header">
            <div class="search-container">
                <i class="fas fa-search"></i>
                <input type="text" placeholder="Rechercher...">
            </div>
            <div class="header-actions">
             <button class="notification-btn" id="notification-btn">
                <i class="fas fa-bell"></i>
                <span class="notification-badge">0</span>
            </button>
                
<button class="new-consultation-btn" id="new-consultation-btn">
    <i class="fas fa-plus"></i> Nouvelle consultation
</button>
            </div>
        </header>

        <div class="content-wrapper">
            <div class="page-header">
                <h1>Les Consultations</h1>
                <div class="filters">
                    <select id="status-filter">
                        <option value="all">Tous les statuts</option>
                        <option value="pending">En attente</option>
                        <option value="in-progress">En cours</option>
                        <option value="cancelled">annullée</option>
                        <option value="completed">Terminées</option>
                    </select>
                    <select id="type-filter">
                        <option value="all">Tous les types</option>
                        <option value="financing">financement</option>
                        <option value="legal">juridique</option>
                        <option value="marketing">marketing</option>
                        <option value="technical">technique</option>
                    </select>
                </div>
            </div>

            <div class="consultations-list">
                <?php foreach ($liste as $consultation): ?>
                <div class="consultation-card" data-id="<?= intval($consultation['id_consultation']); ?>">
                    <div class="card-header">
                        <div class="consultation-info">
                            <h3><?= htmlspecialchars($consultation['titre']); ?></h3>
                            <span class="consultation-type"><?= htmlspecialchars($consultation['type']); ?></span>
                            <span class="consultation-status <?= strtolower(htmlspecialchars($consultation['statut'])); ?>">
                                <?= htmlspecialchars($consultation['statut']); ?>
                            </span>
                        </div>
                        <div class="consultation-date">
                            <i class="far fa-calendar-alt"></i> <?= htmlspecialchars($consultation['date_consultation']); ?>
                        </div>
                    </div>
                    <div class="card-body">
                        <p><?= htmlspecialchars($consultation['description']); ?></p>
                    </div>
                    <div class="card-footer">
                        <div class="id_utilisateur-info">
                        <img src="http://localhost/project/view/front_office/8 (7).png" alt="id_utilisateur" class="id_utilisateur-avatar">

                            <span><?= htmlspecialchars($consultation['id_utilisateur']); ?></span>
                        </div>

                        <!-- Voir détails button -->
                        <button 
    class="view-details-btn fancy-details-button"
    data-id="<?= intval($consultation['id_consultation']); ?>">
    <i class="fas fa-eye"></i> Voir détails
</button>
                    </div>
                </div>
                <?php endforeach; ?>
            </div>
        </div>

        
<!-- Details -->
<div id="details-modal" class="modal">
    <div class="modal-content" id="details-content">
        <div class="modal-header">
            <h2>Détails de consultation</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <!-- Consultation details will be loaded here -->
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i>
                <span>Chargement...</span>
            </div>
        </div>
    </div>
</div>


<!-- MODAL Ajouter Consultation -->
<div id="new-consultation-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Nouvelle consultation</h2>
            <button class="close-modal">&times;</button>
        </div>
        <div class="modal-body">
            <form id="consultation-form" method="POST" action="consultationList.php">
                <div class="form-group">
                    <label for="consultation-subject">Sujet</label>
                    <input type="text" id="consultation-subject" name="titre" required>
                </div>
                <div class="form-group">
                    <label for="consultation-type">Type</label>
                    <select id="consultation-type" name="type" required>
                        <option value="">Sélectionnez un type</option>
                        <option value="financing">Financement</option>
                        <option value="legal">Juridique</option>
                        <option value="marketing">Marketing</option>
                        <option value="technical">Technique</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="consultation-description">Description</label>
                    <textarea id="consultation-description" name="description" rows="5" required></textarea>
                </div>
                <div class="form-group">
                    <label for="consultation-date">Date</label>
                    <input type="date" id="consultation-date" name="date" required>
                </div>
                <div class="form-group">
                    <label for="consultation-id_utilisateur">id_utilisateur</label>
                    <input type="text" id="consultation-id_utilisateur" name="id_utilisateur" required>
                </div>
                <!-- Statut field (hidden and always pending) -->
                <input type="hidden" name="statut" value="pending">

                <div class="modal-footer">
                    <button class="secondary-btn" type="button" id="cancel-consultation-btn">Annuler</button>
                    <button class="primary-btn" type="submit">Soumettre</button>
                </div>
            </form>
        </div>
    </div>
</div>
    </main>

<!-- Notification Panel -->
<div class="notification-panel" id="notification-panel">
    <div class="notification-header">
        <h3>Notifications</h3>
        <button class="mark-all-read" id="mark-all-read">Tout marquer comme lu</button>
    </div>
    <div class="notification-list" id="notification-list">
        <!-- Notifications will be loaded here -->
    </div>
</div>

<!-- Overlay -->
<div class="overlay" id="overlay"></div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    console.log("DOM fully loaded");
    
    // Elements
    const detailsModal = document.getElementById('details-modal');
    const detailsContent = document.getElementById('details-content');
    const newConsultationModal = document.getElementById('new-consultation-modal');
    const newConsultationBtn = document.getElementById('new-consultation-btn');
    const cancelConsultationBtn = document.getElementById('cancel-consultation-btn');
    const closeButtons = document.querySelectorAll('.close-modal');
    const notificationBtn = document.getElementById('notification-btn');
    const notificationPanel = document.getElementById('notification-panel');
    const notificationList = document.getElementById('notification-list');
    const markAllReadBtn = document.getElementById('mark-all-read');
    const overlay = document.getElementById('overlay');
    
    // Check if elements exist
    if (!detailsModal) console.error("Details modal not found");
    if (!newConsultationModal) console.error("New consultation modal not found");
    if (!newConsultationBtn) console.error("Notification button not found");
    if (!notificationBtn) console.error("Notification panel not found");
    
    // Function to open details modal
    function openDetailsModal(consultationId) {
        console.log("Opening details modal for consultation ID:", consultationId);
        
        // Get the modal body for loading content
        const modalBody = detailsContent.querySelector('.modal-body');
        modalBody.innerHTML = '<div class="loading-spinner"><i class="fas fa-spinner fa-spin"></i><span>Chargement...</span></div>';
        
        // Show the modal
        document.body.classList.add('modal-open');
        detailsModal.classList.add('modal-active');
        
        // Fetch consultation details
        fetch('./reponseList.php?id_consultation=' + consultationId)
            .then(response => {
                console.log("Response status:", response.status);
                if (!response.ok) throw new Error('Erreur réseau: ' + response.status);
                return response.text();
            })
            .then(data => {
                console.log("Data received, length:", data.length);
                modalBody.innerHTML = data;
                
                // Add our own custom fermer button at the end of the content
                const customFermerBtn = document.createElement('button');
                customFermerBtn.className = 'fermer-btn';
                customFermerBtn.innerHTML = '<i class="fas fa-times-circle"></i> Fermer';
                customFermerBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    closeDetailsModal();
                });
                
                // Append the button to the modal body
                modalBody.appendChild(customFermerBtn);
                
                // Also handle any existing fermer buttons
                const existingFermerButtons = modalBody.querySelectorAll('button.fermer-btn, .fermer-btn, button[data-action="fermer"], a.fermer-btn');
                console.log("Found existing fermer buttons:", existingFermerButtons.length);
                
                existingFermerButtons.forEach(btn => {
                    // Remove existing event listeners
                    const newBtn = btn.cloneNode(true);
                    btn.parentNode.replaceChild(newBtn, btn);
                    
                    // Add our event listener
                    newBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log("Existing fermer button clicked");
                        closeDetailsModal();
                    });
                });
            })
            .catch(error => {
                console.error("Error fetching consultation details:", error);
                modalBody.innerHTML = '<p class="error-message">Erreur lors du chargement des détails: ' + error.message + '</p>';
            });
    }
    
    // Function to close details modal
    function closeDetailsModal() {
        console.log("Closing details modal");
        document.body.classList.remove('modal-open');
        detailsModal.classList.remove('modal-active');
    }
    
    // Function to open new consultation modal
    function openNewConsultationModal() {
    console.log("Opening new consultation modal");
    document.body.classList.add('modal-open');
    newConsultationModal.classList.add('modal-active');
    
    // Reset form if needed
    const form = document.getElementById('consultation-form');
    if (form) form.reset();
}
    
    // Function to close new consultation modal
    function closeNewConsultationModal() {
    console.log("Closing new consultation modal");
    document.body.classList.remove('modal-open');
    newConsultationModal.classList.remove('modal-active');
}
    
    // Function to toggle notification panel
    function toggleNotificationPanel() {
        console.log("Toggling notification panel");
        notificationPanel.classList.toggle('active');
        overlay.classList.toggle('active');
        
        if (notificationPanel.classList.contains('active')) {
            loadNotifications();
        }
    }
    
    // Function to load notifications
    function loadNotifications() {
        console.log("Loading notifications");
        notificationList.innerHTML = '<div class="notification-loading">Chargement des notifications...</div>';
        
        fetch("../../api/get-notifications.php")
            .then(response => {
                console.log("Notification response status:", response.status);
                if (!response.ok) throw new Error("Erreur HTTP: " + response.status);
                return response.json();
            })
            .then(data => {
                console.log("Notification data received:", data);
                
                // Update badge
                const notificationBadge = document.querySelector('.notification-badge');
                if (notificationBadge) {
                    notificationBadge.textContent = data.nonLues || 0;
                    notificationBadge.style.display = data.nonLues > 0 ? 'flex' : 'none';
                }
                
                // Display notifications
                if (!Array.isArray(data.notifications) || data.notifications.length === 0) {
                    notificationList.innerHTML = '<div class="notification-empty">Aucune notification</div>';
                    return;
                }
                
                notificationList.innerHTML = '';
                
                data.notifications.forEach(notif => {
                    const item = document.createElement('div');
                    item.className = 'notification-item';
                    if (notif.lu == 0) item.classList.add('unread');
                    
                    // Store consultation ID as data attribute
                    const consultationId = notif.id_consultation;
                    item.setAttribute('data-consultation-id', consultationId);
                    
                    let iconClass = 'fas fa-bell';
                    if (notif.type === 'reponse') {
                        iconClass = 'fas fa-comment-dots';
                    } else if (notif.type === 'assignation') {
                        iconClass = 'fas fa-user-plus';
                    } else if (notif.type === 'statut') {
                        iconClass = 'fas fa-check-circle';
                    }
                    
                    item.innerHTML = `
                        <div class="notification-icon">
                            <i class="${iconClass}"></i>
                        </div>
                        <div class="notification-content">
                            <p>${notif.message}</p>
                            <span class="notification-time">${notif.date_relative || 'Récemment'}</span>
                        </div>
                    `;
                    
                    // Add click event directly to this notification item
                    item.addEventListener('click', function() {
                        console.log("Notification clicked, consultation ID:", consultationId);
                        // Close notification panel
                        notificationPanel.classList.remove('active');
                        overlay.classList.remove('active');
                        // Open details modal
                        openDetailsModal(consultationId);
                    });
                    
                    notificationList.appendChild(item);
                });
            })
            .catch(error => {
                console.error("Error loading notifications:", error);
                notificationList.innerHTML = `<div class="notification-error">Erreur lors du chargement: ${error.message}</div>`;
            });
    }
    
    // Function to mark all notifications as read
    function markAllNotificationsAsRead() {
        console.log("Marking all notifications as read");
        
        fetch("../../api/marquer-notifications-lues.php")
            .then(response => {
                if (!response.ok) throw new Error("Erreur HTTP: " + response.status);
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    document.querySelectorAll('.notification-item.unread').forEach(n => n.classList.remove('unread'));
                    const notificationBadge = document.querySelector('.notification-badge');
                    if (notificationBadge) {
                        notificationBadge.textContent = '0';
                        notificationBadge.style.display = 'none';
                    }
                }
            })
            .catch(error => console.error("Error marking notifications as read:", error));
    }
    
    // Function to check for new notifications
    function checkNotifications() {
        console.log("Checking for new notifications");
        
        fetch("../../api/get-notification-count.php")
            .then(response => {
                if (!response.ok) throw new Error("Erreur HTTP: " + response.status);
                return response.json();
            })
            .then(data => {
                const notificationBadge = document.querySelector('.notification-badge');
                if (notificationBadge) {
                    notificationBadge.textContent = data.count || 0;
                    notificationBadge.style.display = data.count > 0 ? 'flex' : 'none';
                }
            })
            .catch(error => console.error("Error checking notifications:", error));
    }
    
    // Add event listeners
    
    // View details buttons
    document.querySelectorAll('.view-details-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const consultationId = this.getAttribute('data-id');
            if (consultationId) {
                openDetailsModal(consultationId);
            }
        });
    });
    
    // Close buttons
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            const modal = this.closest('.modal');
            if (modal === detailsModal) {
                closeDetailsModal();
            } else if (modal === newConsultationModal) {
                closeNewConsultationModal();
            }
        });
    });
    
    // New consultation button
    if (newConsultationBtn) {
        newConsultationBtn.addEventListener('click', function() {
            newConsultationModal.classList.add('modal-active');
            document.body.classList.add('modal-open');
        });
    }

    // Cancel consultation button
    if (cancelConsultationBtn) {
        cancelConsultationBtn.addEventListener('click', function() {
            newConsultationModal.classList.remove('modal-active');
            document.body.classList.remove('modal-open');
        });
    }
    
    // Notification button
    if (notificationBtn) {
        notificationBtn.addEventListener('click', toggleNotificationPanel);
    }
    
    // Mark all read button
    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', markAllNotificationsAsRead);
    }
    
    // Close modals when clicking outside
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                if (this === detailsModal) {
                    closeDetailsModal();
                } else if (this === newConsultationModal) {
                    closeNewConsultationModal();
                }
            }
        });
    });
    
    // Close notification panel when clicking overlay
    if (overlay) {
        overlay.addEventListener('click', function() {
            notificationPanel.classList.remove('active');
            overlay.classList.remove('active');
        });
    }
    
    // Close with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (detailsModal.classList.contains('modal-active')) {
                closeDetailsModal();
            }
            if (newConsultationModal.classList.contains('modal-active')) {
                closeNewConsultationModal();
            }
            if (notificationPanel.classList.contains('active')) {
                notificationPanel.classList.remove('active');
                overlay.classList.remove('active');
            }
        }
    });
    
    // Check for notifications on page load
    checkNotifications();
    
    // Check for new notifications every 30 seconds
    setInterval(checkNotifications, 30000);
    
    // jQuery extension for :contains selector (case-insensitive)
    if (window.jQuery) {
        jQuery.expr[':'].contains = function(a, i, m) {
            return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
        };
    }
});
</script>

</body>
</html>
